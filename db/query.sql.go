// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package db

import (
	"context"

	"TheCollectorDG/types"
	"github.com/jackc/pgx/v5/pgtype"
)

const createComp = `-- name: CreateComp :exec
INSERT INTO tft_comp (
    match_id,
	summoner_puuid,
	comp_data
) VALUES (
    $1, $2, $3
)
`

type CreateCompParams struct {
	MatchID       string         `json:"matchId"`
	SummonerPuuid string         `json:"summonerPuuid"`
	CompData      types.CompData `json:"compData"`
}

func (q *Queries) CreateComp(ctx context.Context, arg CreateCompParams) error {
	_, err := q.db.Exec(ctx, createComp, arg.MatchID, arg.SummonerPuuid, arg.CompData)
	return err
}

const createMatch = `-- name: CreateMatch :exec
INSERT INTO tft_match (
    id,
	data_version,
	game_version,
	queue_id,
	game_type,
	set_name,
	set_number
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
)
`

type CreateMatchParams struct {
	ID          string `json:"id"`
	DataVersion string `json:"dataVersion"`
	GameVersion string `json:"gameVersion"`
	QueueID     int32  `json:"queueId"`
	GameType    string `json:"gameType"`
	SetName     string `json:"setName"`
	SetNumber   int32  `json:"setNumber"`
}

func (q *Queries) CreateMatch(ctx context.Context, arg CreateMatchParams) error {
	_, err := q.db.Exec(ctx, createMatch,
		arg.ID,
		arg.DataVersion,
		arg.GameVersion,
		arg.QueueID,
		arg.GameType,
		arg.SetName,
		arg.SetNumber,
	)
	return err
}

const getOldestMatchHistories = `-- name: GetOldestMatchHistories :many
SELECT
    puuid,
    background_update_timestamp
FROM tft_summoner
ORDER BY background_update_timestamp ASC NULLS FIRST
LIMIT $1
`

type GetOldestMatchHistoriesRow struct {
	Puuid                     string           `json:"puuid"`
	BackgroundUpdateTimestamp pgtype.Timestamp `json:"backgroundUpdateTimestamp"`
}

func (q *Queries) GetOldestMatchHistories(ctx context.Context, limit int32) ([]GetOldestMatchHistoriesRow, error) {
	rows, err := q.db.Query(ctx, getOldestMatchHistories, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetOldestMatchHistoriesRow
	for rows.Next() {
		var i GetOldestMatchHistoriesRow
		if err := rows.Scan(&i.Puuid, &i.BackgroundUpdateTimestamp); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPuuidsWithNullAccountData = `-- name: GetPuuidsWithNullAccountData :many
SELECT
    puuid
FROM tft_summoner
WHERE name IS NULL OR tag IS NULL
LIMIT $1
`

func (q *Queries) GetPuuidsWithNullAccountData(ctx context.Context, limit int32) ([]string, error) {
	rows, err := q.db.Query(ctx, getPuuidsWithNullAccountData, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var puuid string
		if err := rows.Scan(&puuid); err != nil {
			return nil, err
		}
		items = append(items, puuid)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPuuidsWithNullSummonerData = `-- name: GetPuuidsWithNullSummonerData :many
SELECT
    puuid
FROM tft_summoner
WHERE summoner_id IS NULL
LIMIT $1
`

func (q *Queries) GetPuuidsWithNullSummonerData(ctx context.Context, limit int32) ([]string, error) {
	rows, err := q.db.Query(ctx, getPuuidsWithNullSummonerData, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var puuid string
		if err := rows.Scan(&puuid); err != nil {
			return nil, err
		}
		items = append(items, puuid)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSummonerByPuuid = `-- name: GetSummonerByPuuid :one
SELECT puuid, name, tag, summoner_id, profile_icon_id, summoner_level, full_update_timestamp, background_update_timestamp FROM tft_summoner WHERE puuid = $1
`

func (q *Queries) GetSummonerByPuuid(ctx context.Context, puuid string) (TftSummoner, error) {
	row := q.db.QueryRow(ctx, getSummonerByPuuid, puuid)
	var i TftSummoner
	err := row.Scan(
		&i.Puuid,
		&i.Name,
		&i.Tag,
		&i.SummonerID,
		&i.ProfileIconID,
		&i.SummonerLevel,
		&i.FullUpdateTimestamp,
		&i.BackgroundUpdateTimestamp,
	)
	return i, err
}

const insertPuuid = `-- name: InsertPuuid :exec
INSERT INTO tft_summoner (
    puuid
) VALUES (
    $1
) ON CONFLICT (puuid) DO NOTHING
`

func (q *Queries) InsertPuuid(ctx context.Context, puuid string) error {
	_, err := q.db.Exec(ctx, insertPuuid, puuid)
	return err
}

const matchExists = `-- name: MatchExists :one
SELECT EXISTS (
    SELECT id, data_version, game_version, queue_id, game_type, set_name, set_number FROM tft_match WHERE id = $1
)
`

func (q *Queries) MatchExists(ctx context.Context, id string) (bool, error) {
	row := q.db.QueryRow(ctx, matchExists, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const setBackgroundUpdateTimestamp = `-- name: SetBackgroundUpdateTimestamp :exec
UPDATE tft_summoner
SET background_update_timestamp = $2::TIMESTAMP
WHERE puuid = $1
`

type SetBackgroundUpdateTimestampParams struct {
	Puuid                     string           `json:"puuid"`
	BackgroundUpdateTimestamp pgtype.Timestamp `json:"backgroundUpdateTimestamp"`
}

func (q *Queries) SetBackgroundUpdateTimestamp(ctx context.Context, arg SetBackgroundUpdateTimestampParams) error {
	_, err := q.db.Exec(ctx, setBackgroundUpdateTimestamp, arg.Puuid, arg.BackgroundUpdateTimestamp)
	return err
}

const updateAccount = `-- name: UpdateAccount :exec
UPDATE tft_summoner
SET name = $2::VARCHAR,
    tag = $3::VARCHAR
WHERE puuid = $1
`

type UpdateAccountParams struct {
	Puuid string `json:"puuid"`
	Name  string `json:"name"`
	Tag   string `json:"tag"`
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) error {
	_, err := q.db.Exec(ctx, updateAccount, arg.Puuid, arg.Name, arg.Tag)
	return err
}

const updateSummoner = `-- name: UpdateSummoner :exec
UPDATE tft_summoner
SET summoner_id = $2::VARCHAR,
    profile_icon_id = $3::INT,
    summoner_level = $4::INT
WHERE puuid = $1
`

type UpdateSummonerParams struct {
	Puuid         string `json:"puuid"`
	SummonerID    string `json:"summonerId"`
	ProfileIconID int32  `json:"profileIconId"`
	SummonerLevel int32  `json:"summonerLevel"`
}

func (q *Queries) UpdateSummoner(ctx context.Context, arg UpdateSummonerParams) error {
	_, err := q.db.Exec(ctx, updateSummoner,
		arg.Puuid,
		arg.SummonerID,
		arg.ProfileIconID,
		arg.SummonerLevel,
	)
	return err
}
